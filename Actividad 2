Lectura desde un archivo CSV:

import pandas as pd

df = pd.read_csv(‘Data/mtcars.csv’)
df.head()`

Escritura en un archivo CSV:

df.to_csv('Data/nuevo_archivo.csv', index=False) # No escribe los valores de índice

Lectura desde un archivo de texto (por ejemplo, .txt) con separador de pestaña:

df = pd.read_csv('Data/mtcars.txt', sep='\t') df.head()

Lectura desde un archivo de Excel (por ejemplo, .xlsx) especificando la hoja:

df = pd.read_excel('Data/mtcars.xlsx', sheet_name='Sheet2') df.head()

Resumen de estadísticas básicas:

df = pd.read_csv('Data/iris.csv')
df.describe()

Covarianza:

La covarianza mide cómo dos variables se mueven juntas. Puedes calcular la covarianza entre columnas específicas de un DataFrame utilizando el método cov():

cov_matrix = df[['column1', 'column2']].cov()
Esto devolverá una matriz de covarianza que muestra la covarianza entre 'column1' y 'column2'.

Correlación:

La correlación es una medida estandarizada de la relación entre dos variables. Puedes calcular la correlación entre columnas específicas de un DataFrame utilizando el método corr():
corr_matrix = df[['column1', 'column2']].corr()

Visualización de datos:

df.head()  # Muestra los primeros 5 registros por defecto
df.tail()  # Muestra los últimos 5 registros por defecto
df.columns  # Obtiene los nombres de las columnas
df.dtypes  # Obtiene los tipos de datos de las columnas
df.index  # Obtiene el índice del DataFrame
df['column_name'].unique()  # Obtiene los valores únicos de una columna
df.values  # Obtiene los valores del DataFrame
df.sort_values(by=['Column1', 'Column2'], ascending=[True, True])  # Ordena el DataFrame por columnas específicas

Selección de datos:

df['column_name']  # Selecciona una columna por nombre
df[0:3]  # Selecciona las primeras 3 filas
df.loc[0:3]  # Selecciona filas por índice (de 0 a 3)
df.loc[0:3, ['column1', 'column2']]  # Selecciona filas y columnas específicas por índice
df.iloc[0:2]  # Selecciona filas por posición (primeras 2 filas)
df.iloc[2, 3, 6]  # Selecciona valores por posición específica
df.iloc[0:2, 0:2]  # Selecciona filas y columnas por posición (primeras 2 filas y primeras 2 columnas)
df.ix[1, 1]  # Obtiene el valor de una fila y columna específica
df.ix[:, 2]  # Obtiene todos los valores de una columna en la segunda posición
df.iat[1, 1]  # Obtiene un valor escalar de forma rápida (alternativa a iloc)
df.T  # Transpone el DataFrame
df[df['column_name'] > 7.5]  # Filtra el DataFrame por una condición en una columna
df[df['column_name'].isin(['condition_value1', 'condition_value2'])]  # Filtra el DataFrame por una condición de valor en una columna
df[(df['column1'] > 7.5) & (df['column2'] > 3)]  # Filtra el DataFrame por múltiples condiciones en múltiples columnas usando el operador AND
df[(df['column1'] > 7.5) | (df['column2'] > 3)]  # Filtra el DataFrame por múltiples condiciones en múltiples columnas usando el operador OR

###Ejercicio:

import pandas as pd

data = {'Column1': [1, 2, 3, 4, 5],
        'Column2': [6, 7, 8, 9, 10],
        'Column3': [11, 12, 13, 14, 15],
        'Column4': [16, 17, 18, 19, 20]}

df = pd.DataFrame(data)

###Operaciones básicas con Pandas

import pandas as pd

cadena_fechas = ('2017-04-01','2017-04-02','2017-04-03','2017-04-04')
fechas = pd.to_datetime(pd.Series(cadena_fechas))
print(fechas)

data_1 = {'primer_nombre': ['Amy', 'Amy', 'Jason', 'Nick', 'Stephen','Amy'],
        'ultimo_nombre': ['Jackson', 'J', 'Miller', 'Milner', 'L','J'],
        'edad': [42, 42, 36, 24, 24, 42]}
df = pd.DataFrame(data_1, columns=['primer_nombre', 'ultimo_nombre', 'edad'])
print(df)

df.rename(columns={'primer_nombre': 'new_primer_nombre'}, inplace=True)
print(df)

df.columns = ['col1_new_name', 'col2_new_name', 'col3_new_name']
print(df)

duplicados = df.duplicated()
print(duplicados)

df = df.drop_duplicates()
print(df)

df = df.drop_duplicates(['primer_nombre'])
print(df)

df = df.drop_duplicates(['primer_nombre'], keep='first')
print(df)

df['nueva_columna'] = df['edad'] + 5
print(df)

df['nueva_columna'] = df['primer_nombre'] + '_' + df['ultimo_nombre']
print(df)

mylist = [1, 2, 3, 4, 5]
df['new_column_name'] = pd.Series(mylist)
print(df)

df.dropna()
print(df)

df.fillna(value=0)
print(df)

mean = df['edad'].mean()
df['edad'].fillna(mean)
print(df)

print(df.mean())
print(df.max())
print(df.min())
print(df.sum())
print(df.count())
print(df.cumsum())

df.apply(pd.Series.cumsum)
print(df)

df['edad'] = df['edad'].map(lambda x: 1+x)
print(df)

func = lambda x: x + 1
df = df.applymap(func)
print(df)

La salida del programa será:

0   2017-04-01
1   2017-04-02
2   2017-04-03
3   2017-04-04
dtype: datetime64[ns]

  primer_nombre ultimo_nombre  edad
0           Amy       Jackson    42
1           Amy             J    42
2         Jason        Miller    36
3          Nick        Milner    24
4       Stephen             L    24
5           Amy             J    42

  new_primer_nombre ultimo_nombre  edad
0               Amy       Jackson    42
1               Amy             J    42
2             Jason        Miller    36
3              Nick        Milner    24
4           Stephen             L    24
5               Amy             J    42

  col1_new_name col2_new_name col3_new_name
0           Amy       Jackson           J
1           Amy             J           J
2         Jason        Miller           J
3          Nick        Milner           J
4       Stephen             L           J
5           Amy             J           J

0    False
1    False
2    False
3    False
4    False
5     True
dtype: bool

  col1_new_name col2_new_name col3_new_name
0           Amy       Jackson           J
1           Amy             J           J
2         Jason        Miller           J
3          Nick        Milner           J
4       Stephen             L           J

  col1_new_name col2_new_name col3_new_name
0           Amy       Jackson           J
2         Jason        Miller           J
3          Nick        Milner           J
4       Stephen             L           J

  col1_new_name col2_new_name col3_new_name
0           Amy       Jackson           J
2         Jason        Miller           J
3          Nick        Milner           J
4       Stephen             L           J

  col1_new_name col2_new_name col3_new_name  nueva_columna
0           Amy       Jackson           J             47
2         Jason        Miller           J             41
3          Nick        Milner           J             29
4       Stephen             L           J             29

  col1_new_name col2_new_name col3_new_name     nueva_columna
0           Amy       Jackson           J      Amy_Jackson
2         Jason        Miller           J    Jason_Miller
3          Nick        Milner           J     Nick_Milner
4       Stephen             L           J  Stephen_L

  col1_new_name col2_new_name col3_new_name  nueva_columna  new_column_name
0           Amy       Jackson           J      Amy_Jackson               1
2         Jason        Miller           J    Jason_Miller               2
3          Nick        Milner           J     Nick_Milner               3
4       Stephen             L           J  Stephen_L               4

  col1_new_name col2_new_name col3_new_name  nueva_columna  new_column_name
0           Amy       Jackson           J      Amy_Jackson               1
2         Jason        Miller           J    Jason_Miller               2
3          Nick        Milner           J     Nick_Milner               3
4       Stephen             L           J  Stephen_L               4

  col1_new_name col2_new_name col3_new_name  nueva_columna  new_column_name
0           Amy       Jackson           J      Amy_Jackson               1
2         Jason        Miller           J    Jason_Miller               2
3          Nick        Milner           J     Nick_Milner               3
4       Stephen             L           J  Stephen_L               4



sub_df = df.iloc[0:3, 0:3]
print(sub_df)

Salida:

   Column1  Column2  Column3
0        1        6       11
1        2        7       12
2        3        8       13
La variable sub_df contiene solo las primeras 3 filas y las primeras 3 columnas del DataFrame original.

import pandas as pd

# Lectura desde un archivo CSV
df = pd.read_csv('Data/mtcars.csv')
df.head()
